{"version":3,"sources":["webpack:///./main.js"],"names":["getUserMedia","require","Peer","SERVER_ADDRESS","roomName","getParameterByName","console","log","peer","io","socket","on","name","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","watchForData","document","getElementById","addEventListener","yourMessage","value","send","data","textContent","stream","video","createElement","body","appendChild","src","URL","createObjectURL","play","audio","err","error","emit","initiator","trickle","JSON","stringify","accept","parse","signal","offer"],"mappings":"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","file":"main.js","sourcesContent":["const getUserMedia = require('getusermedia');\nconst Peer = require('simple-peer');\n\nlet SERVER_ADDRESS = 'https://gr.itguy.ir:9443';\nlet roomName = getParameterByName('r');\nconsole.log('welcome to room' , roomName);\nlet peer;\n\nconsole.log(io);\nvar socket = io(SERVER_ADDRESS);\nsocket.on('connect', function(){\n  console.log('Connected to socket');\n});\n\n\n\nfunction getParameterByName(name, url) {\n    if (!url) {\n      url = window.location.href;\n    }\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\n\nfunction watchForData(peer){\n  document.getElementById('send').addEventListener('click', function () {\n    let yourMessage = document.getElementById('yourMessage').value;\n    peer.send(yourMessage);\n  })\n\n  peer.on('data', function (data) {\n    document.getElementById('messages').textContent += data + '\\n';\n  })\n\n  peer.on('stream', function (stream) {\n    let video = document.createElement('video');\n    document.body.appendChild(video)\n\n    video.src = window.URL.createObjectURL(stream)\n    video.play()\n  })\n};\n\ngetUserMedia({ video: false, audio: true }, function (err, stream) {\n  if (err) return console.error(err);\n\n\n  socket.emit('sig:ready',roomName);\n  console.log('sent ready');\n\n  socket.on('sig:init',function(){\n    console.log('got init');\n    peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    peer.on('signal', function (data) {\n      socket.emit('sig:offer', JSON.stringify(data));\n      console.log('sent offer', data);     \n    })\n  });\n\n\n  socket.on('sig:accept', function(accept){\n    accept = JSON.parse(accept);\n    peer.signal(accept);\n    console.log('got accept',accept);\n    watchForData(peer);\n  });\n\n\n  socket.on('sig:offer', function(offer){\n    offer = JSON.parse(offer);\n    console.log('got offer',offer);\n    peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    });\n    peer.on('signal', function (data) {\n      socket.emit('sig:accept', JSON.stringify(data));\n      console.log('sent accept', data);     \n    })\n    peer.signal(offer);\n    watchForData(peer);\n  });\n\n\n\n  // document.getElementById('connect').addEventListener('click', function () {\n  //     console.log('going to connect to role',otherRole);\n  //   if(otherId){ \n  //     console.log('signaling role',otherRole);\n  //     peer.signal(otherId);\n  //   }else{\n  //     console.log('we dont have otherId so going to call');\n  //     $.ajax({ // there is no otherID \n  //       url: SERVER_ADDRESS + `/kv/v1/keys/${roomName}-${otherRole}`,\n  //       method: 'GET',\n  //       success: function(data){\n  //         console.log('signaling role',otherRole);\n  //         peer.signal(data);\n  //       },\n  //       error: err =>{\n  //         console.log('failed to get roleID ',otherRole);\n  //       }\n  //     })\n  //   }\n    \n  // })\n\n\n}); // end of getUserMedia\n\n\n\n\n\n\n\n// function setup(isInitiator){\n//   myRole = isInitiator ? 'a' : 'b';\n//   otherRole = isInitiator ? 'b' : 'a';\n\n// }\n\n\n// let getOtherId = $.ajax({\n//   url: SERVER_ADDRESS + `/kv/v1/keys/${roomName}-a`,\n//   method: 'GET'\n// })\n// getOtherId.fail(err => {\n//   // you are the first one. initiate!\n//   console.log('other side is not setup yet');\n//   setup(true);\n// });\n// getOtherId.done(data => {\n//   // someone else is already here. ( or didn't cleanup after leaving )\n//   console.log('otherId is ',data);\n//   otherId = data;\n//   setup(false);\n// })\n\n// $('button#reset').on('click', e => {\n//   $.ajax({\n//     url: SERVER_ADDRESS + `/kv/v1/keys/${roomName}-${myRole}`,\n//     type: 'DELETE'\n//   })\n//   $.ajax({\n//     url: SERVER_ADDRESS + `/kv/v1/keys/${roomName}-${otherRole}`,\n//     type: 'DELETE'\n//   })\n// })\n\n\n// WEBPACK FOOTER //\n// ./main.js"],"sourceRoot":""}